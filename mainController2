#!/usr/bin/env ruby
require 'highline/import'
require 'sqlite3'

Dir["./app/**/*.rb"].each { |f| require f }
Dir["./lib/*.rb"].each { |f| require f }

menu_prompt = <<EOS
1. Calculate exchange rate
2. Display all currencies
3. Alter a currency
4. Add a currency
5. Delete a currency
6. Exit
EOS

# use country_name 1 & country_name 2, fetch both lines,
  def currencies_calculate (arrayp2)
	db_x = SQLite3::Database.open "db/currencies.sqlite"
#fetch source country values
    xx = db_x.execute("SELECT * FROM currency_X WHERE country_name = \"#{arrayp2[0]}\"")
    country_name1 = xx[0][1]
 	currency1 = xx[0][2]
 	currency_abrv1 = xx[0][3]
 	rate_to_euro1 = xx[0][4]
 	result1 = country_name1 + " uses the " + currency1 + " (" + currency_abrv1 + ") per " + rate_to_euro1.to_s + " Euro"

#fetch target country values
    yy = db_x.execute("SELECT * FROM currency_X WHERE country_name = \"#{arrayp2[1]}\"")
    country_name2 = yy[0][1]
 	currency2 = yy[0][2]
 	currency_abrv2 = yy[0][3]
 	rate_to_euro2 = yy[0][4]
 	result2 = country_name2 + " uses the " + currency2 + " (" + currency_abrv2 + ") per " + rate_to_euro2.to_s + " Euro"

# calculate exchange statement
     xrate = (rate_to_euro1 * 100) / (rate_to_euro2)
	result3 = "100 " + currency_abrv1 + " are worth " + xrate.round(2).to_s + " " + currency_abrv2

#compile results and post to screen
 	result = result1 + "\n" + result2 + "\n" + result3
 	puts result
	if db_x then db_x.close end
  end

# Use id to fetch record then update with parms
  def currencies_change (arrayp5)
	db_x = SQLite3::Database.open "db/currencies.sqlite"
	db_x.execute("UPDATE currency_X
		SET country_name = \"#{arrayp5[0]}\", currency = \"#{arrayp5[1]}\",
	        currency_abrv = \"#{arrayp5[2]}\", rate_to_euro = \"#{arrayp5[3]}\"
            WHERE id = \"#{arrayp5[4]}\"")
	if db_x then db_x.close end
  end

# Populate fields with passed parms and write record
  def currencies_add (arrayp4)
	db_x = SQLite3::Database.open "db/currencies.sqlite"
	db_x.execute("INSERT INTO currency_X
		(country_name, currency, currency_abrv, rate_to_euro)
		VALUES ( ?,?,?,?)", arrayp4[0], arrayp4[1], arrayp4[2], arrayp4[3])
	if db_x then db_x.close end
  end

# Use id to fetch the record then delete this record
  def currencies_delete (arrayp0)
	db_x = SQLite3::Database.open "db/currencies.sqlite"
	db_x.execute("delete from currency_X where id = \"#{arrayp0[0]}\"")
	if db_x then db_x.close end
  end

# Display entire file of countries
  def currencies_show
	db_x = SQLite3::Database.open "db/currencies.sqlite"
	zz = db_x.execute("select * from currency_X order by country_name")
	puts zz
    j = 0
    k = zz.length
    while j < k
      pp = ""
        5.times do |i|
          pp += zz[j][i].chomp
          pp += " "
        end
      pp += "\n"
      puts pp
      j +=
    end
	if db_x then db_x.close end
  end

  choose do |menu|
    menu.prompt = ""
    menu.choice('Calculate exchange rate') { currencies_calculate (ARGV)}
    menu.choice('Display all currencies') { currencies_show }
    menu.choice('Alter a currency') { currencies_change (ARGV)}
    menu.choice('Add a currency') { currencies_add (ARGV)}
    menu.choice('Delete a currency') { currencies_delete (ARGV)}
    menu.choice('Exit') { say("Bon voyage!!!\n") }
  end
end